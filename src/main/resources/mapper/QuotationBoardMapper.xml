<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.kosa.quotationBoard.mapper.QuotationBoardMapper">

    <!-- 1) resultMap: 그대로 유지 -->
    <resultMap id="QuotationBoardResultMap"
               type="kr.or.kosa.quotationBoard.dto.QuotationBoard">
        <!-- 기본 필드 매핑 -->
        <id     property="postId"        column="POST_ID"/>
        <result property="expertId"      column="EXPERT_ID"/>
        <result property="categoryId"    column="CATEGORY_ID"/>
        <result property="state"         column="STATE"/>
        <result property="title"         column="TITLE"/>
        <result property="content"       column="CONTENT"/>
        <result property="createdAt"     column="CREATED_AT"/>
        <result property="userNickname"  column="USER_NICKNAME"/>
        <result property="userId"        column="USERID"/>
        <result property="categoryName" column="CATEGORY_NAME"/>

        <!-- 컬렉션 매핑 -->
        <collection property="quotationLocations"
                    ofType="kr.or.kosa.quotationBoard.dto.location">
            <id     property="locationId" column="LOCATION_ID"/>
            <result property="city"       column="CITY"/>
            <result property="district"   column="DISTRICT"/>
        </collection>
    </resultMap>

    <resultMap id="LocationResultMap" type="kr.or.kosa.quotationBoard.dto.location">
        <id     property="locationId" column="LOCATION_ID"/>
        <result property="city"       column="CITY"/>
        <result property="district"   column="DISTRICT"/>
    </resultMap>

    <resultMap id="CategoryResultMap"
               type="kr.or.kosa.expert.dto.Category">
        <id     property="categoryId" column="CATEGORY_ID"/>
        <result property="name"       column="NAME"/>
    </resultMap>



    <insert id="insertQuotationBoard" parameterType="kr.or.kosa.quotationBoard.dto.QuotationBoard">
        INSERT INTO quotation_board (post_id, expert_id, category_id, state)
        VALUES (#{postId}, #{expertId}, #{categoryId}, #{state})
    </insert>

    <update id="updateQuotationBoard" parameterType="kr.or.kosa.quotationBoard.dto.QuotationBoard">
        UPDATE quotation_board
        SET
            expert_id = #{expertId},
            state = #{state}
        WHERE post_id = #{postId}
    </update>

    <!-- 추가: 지역 매핑 먼저 삭제 -->
    <delete id="deleteQuotationLocations" parameterType="int">
        DELETE FROM quotation_location
        WHERE post_id = #{postId}
    </delete>

    <delete id="deleteQuotationBoard" parameterType="int">
        DELETE FROM quotation_board WHERE post_id = #{postId}
    </delete>

 <!-- 2) 카테고리+지역 조건 조회 (findAll) - DISTINCT 제거 -->
    <select id="findAll" resultMap="QuotationBoardResultMap" parameterType="map">
        SELECT
        qb.post_id       AS POST_ID,
        qb.expert_id     AS EXPERT_ID,
        qb.category_id   AS CATEGORY_ID,
        c.name           AS CATEGORY_NAME,
        qb.state         AS STATE,
        b.title          AS TITLE,
        b.content        AS CONTENT,
        b.created_at     AS CREATED_AT,
        b.user_nickname  AS USER_NICKNAME,
        b.userid         AS USERID,
        l.location_id    AS LOCATION_ID,
        l.city           AS CITY,
        l.district       AS DISTRICT
        FROM quotation_board qb
        JOIN board b ON qb.post_id = b.post_id
        JOIN category c ON qb.category_id = c.category_id
        JOIN quotation_location ql ON qb.post_id = ql.post_id
        JOIN location l ON ql.location_id = l.location_id
        <where>
            <!-- categoryId가 null이 아닐 때만 조건 추가 -->
            <if test="categoryId != null">
                AND qb.category_id = #{categoryId}
            </if>
            <!-- locationId가 null이 아닐 때만 조건 추가 -->
            <if test="locationId != null">
                AND ql.location_id = #{locationId}
            </if>

            <!-- 항상 적용되는 기본 필터 -->
            AND qb.state = '진행전'
            AND qb.expert_id = 0

            <!-- 전문가가 속한 카테고리 필터 -->
            AND qb.category_id IN (
            SELECT ec.category_id
            FROM expert_category ec
            WHERE ec.user_id = #{userId}
            )

            <!-- 전문가가 속한 지역 필터 -->
            AND ql.location_id IN (
            SELECT el.location_id
            FROM expert_location el
            WHERE el.user_id = #{userId}
            )
        </where>
        ORDER BY
        qb.post_id DESC,
        l.location_id
    </select>




    <!-- 3) 단일 포스트+위치 조회 (findByPostIdWithLocations) - 기존 그대로, 필요 시 ORDER BY 추가 -->
    <select id="findByPostIdWithLocations"
            parameterType="long"
            resultMap="QuotationBoardResultMap">
        SELECT
        qb.post_id      AS POST_ID,
        qb.expert_id    AS EXPERT_ID,
        qb.category_id  AS CATEGORY_ID,
        c.name          AS CATEGORY_NAME,  <!-- 여기에서 카테고리 이름을 추가 -->
        qb.state        AS STATE,
        b.title         AS TITLE,
        b.content       AS CONTENT,
        b.created_at    AS CREATED_AT,
        b.user_nickname AS USER_NICKNAME,
        b.userid        AS USERID,
        l.location_id   AS LOCATION_ID,
        l.city          AS CITY,
        l.district      AS DISTRICT
        FROM quotation_board qb
        JOIN board b
        ON qb.post_id = b.post_id
        LEFT JOIN quotation_location ql
        ON qb.post_id = ql.post_id
        LEFT JOIN location l
        ON ql.location_id = l.location_id
        LEFT JOIN category c  <!-- category 테이블을 조인 -->
        ON qb.category_id = c.category_id  <!-- category_id로 매칭 -->
        WHERE qb.post_id = #{postId}
        ORDER BY l.location_id
    </select>

    <!-- Mapper XML - 개선 후: 다중 Insert 쿼리 -->
    <insert id="insertQuotationLocations">
        INSERT INTO quotation_location (post_id, location_id)
        <foreach collection="locationIds" item="locationId" separator=" UNION ALL ">
            SELECT #{postId}, #{locationId} FROM dual
        </foreach>
    </insert>

    <select id="findLocationsByUserId"
            parameterType="long"
            resultMap="LocationResultMap">
    SELECT
    l.location_id   AS LOCATION_ID,
    l.city          AS CITY,
    l.district      AS DISTRICT
    FROM expert_location e
    LEFT JOIN location l
    ON e.location_id = l.location_id
    WHERE e.user_id = #{userId}
    </select>

    <select id="findCategoriesByUserId"
            parameterType="long"
            resultMap="CategoryResultMap">
        SELECT
            c.category_id AS CATEGORY_ID,
            c.name        AS NAME
        FROM expert_category ec
                 JOIN category c
                      ON ec.category_id = c.category_id
        WHERE ec.user_id = #{userId}
        ORDER BY c.name
    </select>

    <select id="findMyRequests" parameterType="map" resultMap="QuotationBoardResultMap">
        SELECT
        qb.post_id        AS POST_ID,
        b.title           AS TITLE,
        b.content         AS CONTENT,
        qb.expert_id      AS EXPERT_ID,
        qb.state          AS STATE,
        c.name            AS CATEGORY_NAME,
        b.created_at      AS CREATED_AT,
        -- expert_id가 null 또는 0이 아니면, expert_name을 가져옴
        CASE
        WHEN qb.expert_id IS NOT NULL AND qb.expert_id != 0 THEN u.nickname
        ELSE NULL
        END AS EXPERT_NAME
        FROM quotation_board qb
        JOIN board b        ON qb.post_id = b.post_id
        JOIN category c     ON qb.category_id = c.category_id
        LEFT JOIN users u    ON qb.expert_id = u.user_id  <!-- user 테이블과 조인 -->
        <where>
            AND b.userid = #{userId}
            AND qb.state = #{state}
        </where>
        ORDER BY b.created_at DESC  <!-- 작성 날짜 기준 최신순 정렬 -->
    </select>

    <select id="findMyQuotations" parameterType="map" resultMap="QuotationBoardResultMap">
        SELECT
        qb.POST_ID,
        qb.EXPERT_ID,
        qb.CATEGORY_ID,
        c.name AS CATEGORY_NAME,
        qb.STATE,
        b.TITLE,
        b.CONTENT,
        b.CREATED_AT,
        b.USER_NICKNAME,
        b.USERID
        FROM QUOTATION_BOARD qb
        JOIN BOARD b
        ON qb.POST_ID = b.POST_ID
        JOIN CATEGORY c     <!-- category 테이블 조인 -->
        ON qb.CATEGORY_ID = c.CATEGORY_ID
        JOIN CHAT_ROOM cr
        ON cr.BOARD_ID = b.POST_ID
        JOIN CHAT_PARTICIPANT cp
        ON cp.CHAT_ROOM_ID = cr.CHAT_ROOM_ID
        WHERE qb.STATE   = #{state}
        AND cp.USER_ID = #{userId}
        AND b.USERID  != #{userId}
        ORDER BY b.created_at DESC
    </select>


</mapper>
