<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.kosa.mapper.UserMapper">

	<resultMap type="kr.or.kosa.user.dto.Users" id="userMap">
		<id property="userId" column="USER_ID" />
		<result property="email" column="EMAIL" />
		<result property="password" column="PASSWORD" />
		<result property="nickname" column="NICKNAME" />
		<result property="profileImg" column="PROFILE_IMG" />
		<result property="provider" column="PROVIDER" />
		<result property="providerId" column="PROVIDER_ID" />
		<result property="enabled" column="ENABLED" />
		<result property="createdAt" column="CREATED_AT" />
		<result property="updatedAt" column="UPDATED_AT" />
		<result property="isDeleted" column="IS_DELETED" />

		<collection property="authList" resultMap="authMap"></collection>
	</resultMap>

	<resultMap type="kr.or.kosa.user.dto.UserAuth" id="authMap">
		<result property="userId" column="USER_ID" />
		<result property="authority" column="AUTHORITY" />
	</resultMap>

	<select id="getUserId">
		SELECT USER_ID
		FROM USERS
		WHERE EMAIL = #{email}
	</select>

	<select id="emailExists">
		SELECT COUNT(*) FROM USERS WHERE EMAIL = #{email}
	</select>

	<select id="findUserByEmail" resultMap="userMap">
		SELECT U.USER_ID, U.EMAIL, U.PASSWORD, U.NICKNAME, U.ENABLED,
		U.UPDATED_AT,
		U.PROFILE_IMG, A.USER_ID,
		A.AUTHORITY
		FROM USERS U
		LEFT JOIN USER_AUTH A
		ON U.USER_ID = A.USER_ID
		WHERE U.EMAIL = #{email}
		AND U.IS_DELETED = 'N'
	</select>

	<insert id="signUp" parameterType="kr.or.kosa.user.dto.Users">
		INSERT INTO USERS (USER_ID, EMAIL, PASSWORD, NICKNAME)
		VALUES (USER_SEQ.NEXTVAL, #{email},
		#{password}, #{nickname})
	</insert>

	<insert id="insertSocialUser" parameterType="kr.or.kosa.user.dto.Users">
		INSERT INTO USERS (USER_ID, EMAIL, PASSWORD, NICKNAME, PROVIDER,
		PROVIDER_ID)
		VALUES (USER_SEQ.NEXTVAL, #{email},
		#{password}, #{nickname}, #{provider}, #{providerId})
	</insert>

	<insert id="addAuth" parameterType="kr.or.kosa.user.dto.UserAuth">
		INSERT INTO USER_AUTH (USER_ID, AUTHORITY)
		VALUES (#{userId}, #{authority})
	</insert>

	<update id="updateUserProfileImg">
		UPDATE USERS
		SET PROFILE_IMG = #{profileImg}, UPDATED_AT = SYSDATE
		WHERE USER_ID = #{userId}
	</update>

	<update id="updateUserNickname">
		UPDATE USERS
		SET NICKNAME = #{nickname}, UPDATED_AT = SYSDATE
		WHERE USER_ID = #{userId}
	</update>

	<select id="verifyPassword">
		SELECT PASSWORD
		FROM USERS
		WHERE USER_ID = #{userId}
	</select>

	<update id="updatePassword">
		UPDATE USERS
		SET PASSWORD = #{password}, UPDATED_AT = SYSDATE
		WHERE USER_ID = #{userId}
	</update>

	<update id="withdrawUser">
		UPDATE USERS
		SET IS_DELETED = 'Y', UPDATED_AT = SYSDATE
		WHERE USER_ID = #{userId}
	</update>

<!--	채팅쪽에서 사용하기 위해서 2개의 메서드 추가 >> 백승호 -->
	<select id="findEmailByUserId" parameterType="long" resultType="string">
		SELECT email
		FROM users
		WHERE user_id = #{userId}
	</select>

	<select id="findNameById" parameterType="long" resultType="string">
		SELECT nickname
		FROM users
		WHERE user_id = #{userId}
	</select>

</mapper>